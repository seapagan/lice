name: Tests

on:
  push:
    branches: ["master"]
  pull_request:
    branches: ["master"]
  workflow_dispatch:

jobs:
  build:

    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      max-parallel: 4
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11", "3.12"]

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    # ---------------------------------------------------------------------- #
    #                      install and configure poetry                      #
    # ---------------------------------------------------------------------- #
    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        virtualenvs-create: true
        virtualenvs-in-project: true
        installer-parallel: true
    # ---------------------------------------------------------------------- #
    #                    load cached venv if cache exists                    #
    # ---------------------------------------------------------------------- #
    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v4
      with:
        path: .venv
        key:
          venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version
          }}-${{ hashFiles('**/poetry.lock') }}
    # ---------------------------------------------------------------------- #
    #              install dependencies if cache does not exist              #
    # ---------------------------------------------------------------------- #
    - name: Install dependencies
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      run: poetry install --no-interaction --no-root

    # ---------------------------------------------------------------------- #
    #                               run Pytest                               #
    # ---------------------------------------------------------------------- #
    - name: Test with pytest
      run: |
        poetry run pytest --cov-report=xml
    - name: Run codacy-coverage-reporter
      env:
        CODACY_CONFIGURED: ${{ secrets.CODACY_PROJECT_TOKEN }}
      if: ${{ env.CODACY_CONFIGURED != ''}}
      uses: codacy/codacy-coverage-reporter-action@v1
      continue-on-error: true
      with:
        project-token: ${{ secrets.CODACY_PROJECT_TOKEN }}
        coverage-reports: ./coverage.xml
